{"name":"Notes","tagline":"","body":"## Demos\r\n### CSS 3 Animations\r\n\r\n- [fire](http://woodall.github.io/notes/fire.html)\r\n- [flipper](http://woodall.github.io/notes/flipper.html)\r\n- [moving squares](http://woodall.github.io/notes/squares.html)\r\n\r\n## CSS 2D Transforms\r\n_5/19/14_\r\nThe `transform` property has 4 different main functions.\r\n### The 4 function\r\n#### Translate\r\nTranslate moves the object\r\n\r\n- `translateX(10px)` moves the item right 10px\r\n- `translateY(10px)` moves the item up 10px\r\n- `translate(10px, 10px)` is shorthand for both\r\n\r\n#### Scale\r\nIncreases the size of the object. \r\n- `ScaleX(.5)` will shrink the image 50% on the X axis\r\n- `ScaleY(2)` grows the image 200% on Y axis\r\n- `Scale(3)` will grow image on both, by 300%\r\n\r\n#### Rotate\r\nRotates image\r\n\r\n- `rotate(150deg)` from 0 to 360deg\r\n**Note the unit is deg**\r\n\r\n#### SkewX/Y\r\n- `skewX(-10deg)` can be positive, or negative values\r\n- `skewY(30deg)`\r\n**Note the unit is deg**\r\n\r\n### transform-origin\r\nTransform is the center by default, but you can move it to other locations of the object including;\r\n\r\n- bottom left\r\n- bottom right\r\n- top left\r\n- top right\r\n\r\n_Example_\r\n\r\n        transform-origin: bottom left;\r\n\r\n## CSS Animations\r\n_5/19/14_\r\n\r\nCSS Animations are a combination of 2 main parts; Keyframes and animation properties.\r\n\r\n### Keyframes\r\nKeyframes have a name _('ride' in the following example)_ in order to be used by the animation property. Keyframes specify the specifics of an animation. (The `from` and `to`).\r\n\r\n_Example_\r\n\r\n     @keyframes ride {\r\n      from { transform: translateX(0px); }\r\n      to   { transform: translateX(450px); }\r\n    }\r\n\r\nAnything can be there including\r\n\r\n- transforms\r\n- background colors\r\n- translates\r\n\r\n### Animation\r\n\r\nThe Animation property manages the specific execution of the keyframe property. Answering questions like\r\n\r\n- when to start?\r\n- how long to animate?\r\n- what happens when over?\r\n- how many times should it animate?\r\n\r\n_Example_\r\n\r\n    .square {\r\n      animation-name: ride;\r\n      animation-duration: 3s;\r\n      animation-iteration-count: 1;\r\n      animation-direction: alternate;\r\n      animation-delay: 1s;\r\n    }\r\n\r\n#### List of animation properties\r\n\r\n**animation-name**  Specifies the name of the keyframe you want to bind to the selector\r\n**animation-duration**  Specifies how many seconds or milliseconds an animation takes to complete\r\n**animation-timing-function**   Specifies the speed curve of the animation\r\n**animation-delay** Specifies a delay before the animation will start\r\n**animation-iteration-count**   Specifies how many times an animation should be played\r\n**animation-direction** Specifies whether or not the animation should play in reverse on alternate cycles\r\n**animation-fill-mode** Specifies what values are applied by the animation outside the time it is executing\r\n**animation-play-state**    Specifies whether the animation is running or paused\r\n\r\n### Prefixes\r\nUntil further notice, we need to use browser prefixes\r\n\r\n    -webkit-animation\r\n    -moz-animation\r\n    -o-animation\r\n    animation\r\n\r\n## Ruby file join\r\n_5/18/14_\r\n\r\n    $LOAD_PATH << File.join(File.dirname(__FILE__), \"..\", \"app\", \"controllers\")\r\n    require \"quotes_controller\"\r\n\r\n`$LOAD_PATH` shows all the paths that are loaded into current environment.\r\nWe're pushing the file\r\n\r\n`File.join()` is used to mash files together.\r\n\r\n`File.dirname` tells current directory of script being run.\r\n\r\nWe are starting with the load path (`$LOAD_PATH`) and adding something to it with `<< File.join`. We start with current location `File.dirname(__FILE__)` and navigate there with known, absolute paths (`'..', 'app', 'controllers'`). Once our load path has a new path on it, we can require the files inside the added directory with `require 'quotes_controller'`.\r\n\r\n## user interface\r\n_5/17/14_\r\n\r\n- lists\r\n- grids\r\n- hero images\r\n- headlines\r\n- buttons\r\n- sections\r\n- content\r\n- backgrounds\r\n- navigation\r\n\r\n## user experience\r\n_5/17/14_\r\n- loading\r\n- scrolling\r\n- navigating\r\n- showing\r\n- hiding\r\n- active state\r\n- inactive state\r\n- tabbing\r\n- alerting\r\n\r\n## types of learning\r\n_5/17/14_\r\n### informative\r\nlearning to get a broad understanding. Learning to keep sharp, but doesn't have a direct application\r\n\r\n### solution\r\nworking on task and encounter a problem. In finding a solution, you leanr something new in the process.\r\n\r\n### practice\r\nsimply applying existing knowledge will permit me to get better, more creative, and learn a new approach\r\n\r\n### exploration\r\nknowing how something works, and trying to find a new way to apply current knowledge\r\n\r\n### application\r\ntaking what i've learned up to this point and applying it.\r\n\r\n\r\n## CSS Animations\r\n_5/16/14_\r\n\r\nQ - how do I add an argument to a coffee class? `#coffee`\r\n\r\n[view demo](animations.html)\r\n\r\n### animation fill mode\r\n- none\r\n- forwards\r\n#### fill mode\r\n![](images/fill-mode.png)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}